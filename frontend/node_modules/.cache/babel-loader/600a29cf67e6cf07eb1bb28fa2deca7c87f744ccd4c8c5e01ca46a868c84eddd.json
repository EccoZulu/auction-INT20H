{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nimport { productListRequest, productListSuccess, productListFail, productDetailsRequest, productDetailsSuccess, productDetailsFail, productPublishRequest, productPublishSuccess, productPublishFail, brandListRequest, brandListSuccess, brandListFail } from '../reducers/productReducers';\nconst createAPIinstance = () => {\n  return axios.create({\n    baseURL: `${baseURL}/api/products`,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    withCredentials: true\n  });\n};\nexport const listProducts = _ref => {\n  let {\n    keyword = undefined,\n    category = undefined,\n    brands = undefined,\n    userID = undefined,\n    status = 'all',\n    ordering = 'endDate'\n  } = _ref;\n  return async dispatch => {\n    try {\n      dispatch(productListRequest());\n      let params = {};\n      if (keyword) {\n        params.search = keyword;\n      }\n      if (category) {\n        params.category = category;\n      }\n      if (brands) {\n        params.brand = brands;\n      }\n      if (userID) {\n        params.user = userID;\n      }\n      if (status) {\n        params.productStatus = status;\n      }\n      if (ordering) {\n        params.ordering = ordering;\n      }\n      const api = createAPIinstance();\n      const {\n        data\n      } = await api.get(`/?${qs.stringify(params, {\n        arrayFormat: 'repeat'\n      })}`);\n      dispatch(productListSuccess(data));\n    } catch (error) {\n      dispatch(productListFail(error.response && error.response.data.detail ? error.response.data.detail : error.message));\n    }\n  };\n};\nexport const detailProducts = id => async dispatch => {\n  try {\n    dispatch(productDetailsRequest());\n    const api = createAPIinstance();\n    const {\n      data\n    } = await api.get(`/${id}`);\n    dispatch(productDetailsSuccess(data));\n  } catch (error) {\n    dispatch(productDetailsFail(error.response && error.response.data.detail ? error.response.data.detail : error.message));\n  }\n};\nexport const publishProduct = product => async dispatch => {\n  try {\n    dispatch(productPublishRequest());\n    const api = createAPIinstance();\n    const {\n      data\n    } = await api.post('/', product, {\n      headers: {\n        \"Content-Type\": 'multipart/form-data'\n      }\n    });\n    dispatch(productPublishSuccess(data));\n  } catch (error) {\n    dispatch(productPublishFail(error.response && error.response.data.detail ? error.response.data.detail : error.message));\n  }\n};\nexport const listBrands = () => async dispatch => {\n  try {\n    dispatch(brandListRequest());\n    const {\n      data\n    } = await axios.get(`${baseURL}/api/products/brands/`);\n    dispatch(brandListSuccess(data));\n  } catch (error) {\n    dispatch(brandListFail(error.response && error.response.data.detail ? error.response.data.detail : error.message));\n  }\n};","map":{"version":3,"names":["axios","qs","productListRequest","productListSuccess","productListFail","productDetailsRequest","productDetailsSuccess","productDetailsFail","productPublishRequest","productPublishSuccess","productPublishFail","brandListRequest","brandListSuccess","brandListFail","createAPIinstance","create","baseURL","headers","withCredentials","listProducts","_ref","keyword","undefined","category","brands","userID","status","ordering","dispatch","params","search","brand","user","productStatus","api","data","get","stringify","arrayFormat","error","response","detail","message","detailProducts","id","publishProduct","product","post","listBrands"],"sources":["F:/e-Auction/frontend/src/actions/productActions.js"],"sourcesContent":["import axios from 'axios'\r\nimport qs from 'qs'\r\nimport { \r\n    productListRequest,\r\n    productListSuccess,\r\n    productListFail,\r\n\r\n    productDetailsRequest,\r\n    productDetailsSuccess,\r\n    productDetailsFail,\r\n\r\n    productPublishRequest,\r\n    productPublishSuccess,\r\n    productPublishFail,\r\n\r\n    brandListRequest,\r\n    brandListSuccess,\r\n    brandListFail,\r\n} from '../reducers/productReducers'\r\n\r\nconst createAPIinstance = () => {\r\n\r\n    return axios.create({\r\n        baseURL: `${baseURL}/api/products`,\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        withCredentials: true\r\n    })\r\n\r\n}\r\n\r\n export const listProducts = ({keyword= undefined, category= undefined, brands= undefined, userID= undefined, status='all', ordering = 'endDate'}) => async (dispatch) => {\r\n    try {\r\n        dispatch(productListRequest());\r\n\r\n        let params = {};\r\n\r\n        if (keyword) {\r\n            params.search = keyword;\r\n        }\r\n        if (category) {\r\n            params.category = category;\r\n        }\r\n        if (brands) {\r\n            params.brand = brands;\r\n        }\r\n        if (userID) {\r\n            params.user = userID;\r\n        }\r\n        if (status) {\r\n            params.productStatus = status;\r\n        }\r\n        if (ordering) {\r\n            params.ordering = ordering;\r\n        }\r\n        \r\n        const api = createAPIinstance()\r\n        const { data } = await api.get(`/?${qs.stringify(params, { arrayFormat: 'repeat' })}`);\r\n\r\n        dispatch(productListSuccess(data));\r\n    } catch (error) {\r\n        dispatch(productListFail(\r\n            error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        ));\r\n    }\r\n};\r\n\r\nexport const detailProducts = (id) => async (dispatch) => {\r\n    try{\r\n        dispatch(productDetailsRequest())\r\n\r\n        const api = createAPIinstance()\r\n        const { data } = await api.get(`/${id}`)\r\n\r\n        dispatch(productDetailsSuccess(data))\r\n    }catch(error){\r\n        dispatch(productDetailsFail(error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        ));\r\n    }\r\n}\r\n\r\nexport const publishProduct = (product) => async (dispatch) => {\r\n    try{\r\n        dispatch(productPublishRequest())\r\n\r\n        const api = createAPIinstance()\r\n        const { data } = await api.post('/', product,{\r\n            headers: {\r\n                \"Content-Type\": 'multipart/form-data'\r\n            }\r\n        })\r\n\r\n        dispatch(productPublishSuccess(data))\r\n    }catch(error){\r\n        dispatch(productPublishFail(\r\n            error.response && error.response.data.detail\r\n            ? error.response.data.detail\r\n            : error.message\r\n        ))\r\n    }\r\n}\r\n\r\nexport const listBrands = () => async (dispatch) => {\r\n    try{\r\n        dispatch(brandListRequest())\r\n\r\n        const { data } = await axios.get(`${baseURL}/api/products/brands/`)\r\n\r\n        dispatch(brandListSuccess(data))\r\n    }catch(error){\r\n        dispatch(brandListFail(error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n                )\r\n            );\r\n        }\r\n    }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}